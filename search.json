[
  {
    "objectID": "pull_req.html",
    "href": "pull_req.html",
    "title": "",
    "section": "",
    "text": "Hello, this page will showcase the dashboard for pull requests!"
  },
  {
    "objectID": "issues.html",
    "href": "issues.html",
    "title": "jsPsych Github Workflow",
    "section": "",
    "text": "Hello, this page will showcase the dashboard for issues\nHello, this page will showcase the main dashboard!\n\n#Initializing Workspace\nimport requests\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#API Function\ndef fetch_api(endpoint):\n url = f\"https://api.github.com/repos/jspsych/jsPsych/{endpoint}\"\n final_data=[]\n while url:\n  response = requests.get(url)\n  data = response.json()\n  for item in data:\n    final_data.append(item)\n  if 'next' in response.links:\n    url = response.links['next']['url']\n  else:\n    break\n\n  return final_data\n\n#Dataframe\ndef create_ent_dataframe(ent_type):\n  is_pr = 'pulls=true' if ent_type == 'pulls' else 'pulls=false'\n  ret_data = fetch_api(f\"issues?{is_pr}&state=all&per_page=100\")\n  entries = []\n  for item in ret_data:\n    print(f\"ITEM TYPE: {type(item)}\")\n    entry = {\n    'number': item['number'],\n    'user': item['user']['login'],\n    'created_at': pd.to_datetime(item['created_at']),\n    'closed_at': pd.to_datetime(item['closed_at']) if item['closed_at'] else None,\n    'state': item['state'],\n    'title': item['title'],\n    'is_pr': 'pull_request' in item\n    }\n  entries.append(entry)\n  df = pd.DataFrame(entries)\n  df['year'] = df['created_at'].dt.year\n  df['quarter'] = df['created_at'].dt.quarter\n\n  return df\n\n\nrmy_df = create_ent_dataframe('issues')\n\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jsPsych Github Workflow",
    "section": "",
    "text": "Hello, this page will showcase the main dashboard!\n\n\nCode\n#Initializing Workspace\nimport requests\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#API Function\ndef fetch_api(endpoint):\n url = f\"https://api.github.com/repos/jspsych/jsPsych/{endpoint}\"\n final_data=[]\n while url:\n  response = requests.get(url)\n  data = response.json()\n  for item in data:\n    final_data.append(item)\n  if 'next' in response.links:\n    url = response.links['next']['url']\n  else:\n    break\n\n  return final_data\n\n#Dataframe\ndef create_ent_dataframe(ent_type):\n  is_pr = 'pulls=true' if ent_type == 'pulls' else 'pulls=false'\n  ret_data = fetch_api(f\"issues?{is_pr}&state=all&per_page=100\")\n  entries = []\n  for item in ret_data:\n    print(f\"ITEM TYPE: {type(item)}\")\n    entry = {\n    'number': item['number'],\n    'user': item['user']['login'],\n    'created_at': pd.to_datetime(item['created_at']),\n    'closed_at': pd.to_datetime(item['closed_at']) if item['closed_at'] else None,\n    'state': item['state'],\n    'title': item['title'],\n    'is_pr': 'pull_request' in item\n    }\n  entries.append(entry)\n  df = pd.DataFrame(entries)\n  df['year'] = df['created_at'].dt.year\n  df['quarter'] = df['created_at'].dt.quarter\n\n  return df"
  },
  {
    "objectID": "discussions.html",
    "href": "discussions.html",
    "title": "",
    "section": "",
    "text": "This page will show the dashboard for discussions"
  }
]