[
  {
    "objectID": "pull_req.html",
    "href": "pull_req.html",
    "title": "",
    "section": "",
    "text": "Hello, this page will showcase the dashboard for pull requests!"
  },
  {
    "objectID": "issues.html",
    "href": "issues.html",
    "title": "jsPsych Github Workflow",
    "section": "",
    "text": "Hello, this page will showcase the dashboard for issues\nHello, this page will showcase the main dashboard!\n\n#Initializing Workspace\nimport requests\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#API Function\ndef fetch_api(endpoint):\n url = f\"https://api.github.com/repos/jspsych/jsPsych/{endpoint}\"\n final_data=[]\n while url:\n  response = requests.get(url)\n  data = response.json()\n  for item in data:\n    final_data.append(item)\n  if 'next' in response.links:\n    url = response.links['next']['url']\n  else:\n    break\n\n  return final_data\n\n#Dataframe\ndef create_ent_dataframe(ent_type):\n  is_pr = 'pulls=true' if ent_type == 'pulls' else 'pulls=false'\n  ret_data = fetch_api(f\"issues?{is_pr}&state=all&per_page=100\")\n  entries = []\n  for item in ret_data:\n    print(f\"ITEM TYPE: {type(item)}\")\n    entry = {\n    'number': item['number'],\n    'user': item['user']['login'],\n    'created_at': pd.to_datetime(item['created_at']),\n    'closed_at': pd.to_datetime(item['closed_at']) if item['closed_at'] else None,\n    'state': item['state'],\n    'title': item['title'],\n    'is_pr': 'pull_request' in item\n    }\n  entries.append(entry)\n  df = pd.DataFrame(entries)\n  df['year'] = df['created_at'].dt.year\n  df['quarter'] = df['created_at'].dt.quarter\n\n  return df\n\n\nrmy_df = create_ent_dataframe('issues')\n\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;\nITEM TYPE: &lt;class 'dict'&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "jsPsych Github Workflow",
    "section": "",
    "text": "Hello, this page will showcase the main dashboard!\n\n\nCode\n#Initializing Workspace\nimport requests\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#API Function\ndef fetch_api(endpoint):\n url = f\"https://api.github.com/repos/jspsych/jsPsych/{endpoint}\"\n final_data=[]\n while url:\n  response = requests.get(url)\n  data = response.json()\n  for item in data:\n    final_data.append(item)\n  if 'next' in response.links:\n    url = response.links['next']['url']\n  else:\n    break\n\n  return final_data\n\n#Dataframe\ndef create_ent_dataframe(ent_type):\n  is_pr = 'pulls=true' if ent_type == 'pulls' else 'pulls=false'\n  ret_data = fetch_api(f\"issues?{is_pr}&state=all&per_page=100\")\n  entries = []\n  for item in ret_data:\n    print(f\"ITEM TYPE: {type(item)}\")\n    entry = {\n    'number': item['number'],\n    'user': item['user']['login'],\n    'created_at': pd.to_datetime(item['created_at']),\n    'closed_at': pd.to_datetime(item['closed_at']) if item['closed_at'] else None,\n    'state': item['state'],\n    'title': item['title'],\n    'is_pr': 'pull_request' in item\n    }\n  entries.append(entry)\n  df = pd.DataFrame(entries)\n  df['year'] = df['created_at'].dt.year\n  df['quarter'] = df['created_at'].dt.quarter\n\n  return df"
  },
  {
    "objectID": "report_scripts.html",
    "href": "report_scripts.html",
    "title": "",
    "section": "",
    "text": "import requests\nimport datetime\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nModuleNotFoundError: No module named 'pandas'\n\n\n\ndef fetch_api(endpoint):\n  url = f\"https://api.github.com/repos/jspsych/jsPsych/{endpoint}\"\n  final_data=[]\n  while url:\n   response = requests.get(url)\n   data = response.json()\n   for item in data:\n     final_data.append(item)\n   if 'next' in response.links:\n     url = response.links['next']['url']\n   else:\n     break\n  return final_data\n\n\ndef create_comm_dataframe():\n    comm_data = fetch_api(\"issues/comments?per_page=100\")\n    comments = []\n    for comment in comm_data:\n        comment_entry = {\n            'issue_number': int(comment['issue_url'].split('/')[-1]),\n            'user': comment['user']['login'],\n            'created_at': pd.to_datetime(comment['created_at']),\n            'body': comment['body']\n        }\n        comments.append(comment_entry)\n\n    return pd.DataFrame(comments)\n\n\ndef analyze_interaction_times(df, comments_df):\n  if comments_df.empty:\n    print(\"Warning: Comments dataframe is empty\")\n    df['comment_count'] = 0\n    df['avg_interaction_time'] = None\n    return df\n\n  comments_by_issue = comments_df.groupby('issue_number').agg({\n    'created_at': list,\n    'issue_number': 'count'\n  }).rename(columns={'issue_number': 'comment_count'})\n\n  df = df.merge(comments_by_issue, left_on='number', right_index=True, how='left')\n  df['comment_count'] = df['comment_count'].fillna(0)\n\n  if 'created_at_x' not in df.columns and 'created_at_y' not in df.columns:\n    df = df.rename(columns={'created_at': 'created_at_x'})\n    if 'created_at' in df.columns:\n      df['created_at_y'] = df['created_at']\n\n  def calculate_interaction_time(row):\n    if 'created_at_y' not in row or pd.isna(row['created_at_y']) or len(row['created_at_y']) == 0:\n      return None\n    dates = [row['created_at_x']] + row['created_at_y']\n    if row['closed_at'] is not None:\n      dates.append(row['closed_at'])\n    dates = [d for d in dates if pd.notna(d)]\n    dates = sorted(dates)\n\n    if len(dates) &gt; 1:\n      time_diff = np.diff([d.timestamp() for d in dates])\n      return np.mean(time_diff) if len(time_diff) &gt; 0 else None\n    return None\n\n  df['avg_interaction_time'] = df.apply(calculate_interaction_time, axis=1)\n\n  return df\n\n\ndef quarterly_metrics(df):\n  return df.groupby(['year', 'quarter']).agg({\n  'number': 'count',\n  'avg_interaction_time': 'mean',\n  'comment_count': ['mean', 'sum']\n  }).round(2)\n\n\ndef plot_quarterly_metrics(metrics, target_metric):\n  plt.figure(figsize=(10, 6))\n  for year in metrics.index.get_level_values('year').unique():\n    year_data = metrics.loc[year]\n    plt.plot(year_data.index, year_data[target_metric],\n            marker='o', label=f'Year {year}')\n\n  plt.xlabel('Quarter')\n  plt.ylabel(target_metric)\n  plt.title(f'Quarterly {target_metric} Over Time')\n  plt.legend()\n  plt.grid(True)\n  plt.show()\n\n\ndef generate_report():\n  issues_df = create_ent_dataframe('issues')\n  pulls_df = create_ent_dataframe('pulls')\n  comments_df = create_comm_dataframe()\n\n  issues_analysis = analyze_interaction_times(issues_df, comments_df)\n  pulls_analysis = analyze_interaction_times(pulls_df, comments_df)\n\n  issues_quarterly = quarterly_metrics(issues_analysis)\n  pulls_quarterly = quarterly_metrics(pulls_analysis)\n\n  return issues_analysis, pulls_analysis, issues_quarterly, pulls_quarterly"
  },
  {
    "objectID": "discussions.html",
    "href": "discussions.html",
    "title": "",
    "section": "",
    "text": "This page will show the dashboard for discussions"
  }
]